#!/bin/bash
################################################################################
## PVS-Deploy (pvsdeploy)
## version: 0.4 "all-in-one"
##
## (c) 2019 Emanuele Ballarin <emanuele@ballarin.cc>
## Released under the terms of the BSD-3 License.
##
## PVS-Deploy is an ultra-lightweight, minimal-dependencies and super-fast
## solution to the problem of preparing large codebases for static analysis
## with a freely-licensed copy of PVS-Studio under Linux.
##
## To use the script, only Bash 4+ support and programs "sed" and "ed" are
## required to be present on $PATH..
################################################################################

# User input acquisition
lineswitch="$1"     # What to do? (add / rem)
relpath="$2"        # Relative path of project basedir

# Immutables (edit the first line if you need another kind of licensing formula)
hl1="// This is an independent project of an individual developer. Dear PVS-Studio, please check it."
hl2="// PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com"

# File operation functions
function createlines {
ed -s "$1" << 'EOF'
0a
// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com
.
$a
.
w
EOF
}

function destroylines {
ed -s "$1" << 'EOF'
1d
w
EOF
ed -s "$1" << 'EOF'
1d
w
EOF
}

function echoerror {
    echo 'Ah, snap! Something went wrong :( '
    echo ' '
    echo 'The correct syntax is:'
    echo 'pvsdeploy OPTION FILE'
    echo 'with OPTION = add -or- rem'
    echo 'and FILE the relative or absolute path to a file or a directory'
    echo ' '
    echo 'Please, try again...'
    echo ' '
}

# Check if argument parsing and file paths are acceptable
if [[ ! -e "$relpath" || "$lineswitch" != "add" && "$lineswitch" != "rem"  ]]; then
    echoerror
    exit
fi

# Preliminaries
abspath=$(realpath "$relpath")

# Find files to operate on (eventually add extensions here as: -o -iname "*.EXTENSION")
find "$abspath" -type f \( -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" -o -iname "*.cp" -o -iname "*.cxx" -o -iname "*.c++" -o -iname "*.cs" -o -iname "*.java" -o -iname "*.C" \) | while read operfile; do

    # Get lines to operate on, eventually
    fileline1=$(sed '1!d' "$operfile")
    fileline2=$(sed '2!d' "$operfile")

    # Select between add or rem (add or remove headers)
    if [[ "$lineswitch" == "add" ]]; then
        # Case: add
        if [[ "$fileline1" != "$hl1" && "$fileline2" != "$hl2" ]]; then
            createlines "$operfile"
        fi

    elif [[ "$lineswitch" == "rem" ]]; then
        # Case: rem
        if [[ "$fileline1" == "$hl1" && "$fileline2" == "$hl2" ]]; then
            destroylines "$operfile"
        fi
    fi

done

echo 'Execution successful'
echo ' '
